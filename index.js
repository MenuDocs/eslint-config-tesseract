module.exports = {
  extends: 'eslint:recommended',
  env: {
    node: true,
    es6: true,
  },
  parserOptions: {
    ecmaVersion: 2020,
  },
  rules: {
    'accessor-pairs': 'warn',
    'array-bracket-spacing': 'error',
    'array-callback-return': 'error',
    'arrow-body-style': 'error',
    'arrow-spacing': 'error',
    'block-spacing': 'error',
    'brace-style': [
      'error',
      '1tbs',
      {
        allowSingleLine: true,
      },
    ],
    'callback-return': 'error',
    camelcase: 'error',
    'comma-dangle': 'error',
    'comma-spacing': 'error',
    'comma-style': 'error',
    complexity: ['warn', { 'max': 30 }],
    'computed-property-spacing': 'error',
    'consistent-return': 'error',
    'consistent-this': 'error',
    curly: ['error', 'multi-line', 'consistent'],
    'dot-location': ['error', 'property'],
    'dot-notation': 'error',
    'eol-last': 'error',
    eqeqeq: 'error',
    'func-names': 'error',
    'func-style': [
      'error',
      'declaration',
      {
        allowArrowFunctions: true,
      },
    ],
    'handle-callback-err': 'error',
    'id-length': [
      'error',
      {
        exceptions: ['i', 'j', 'a', 'b'],
      },
    ],
    indent: [
      'error',
      'tab',
      {
        SwitchCase: 1,
      },
    ],
    'key-spacing': 'error',
    'keyword-spacing': [
      'error',
      {
        overrides: {
          if: {
            after: true,
          },
          for: {
            after: true,
          },
          while: {
            after: true,
          },
          catch: {
            after: true,
          },
          switch: {
            after: true,
          },
        },
      },
    ],
    'max-depth': 'error',
    'max-len': ['error', 200, 2],
    'max-nested-callbacks': [
      'error',
      {
        max: 4,
      },
    ],
    'max-statements-per-line': [
      'error',
      {
        max: 2,
      },
    ],
    'new-cap': 'error',
    'newline-per-chained-call': [
      'error',
      {
        ignoreChainWithDepth: 6,
      },
    ],
    'no-array-constructor': 'error',
    'no-bitwise': 'warn',
    'no-console': [
      'error',
      {
        allow: ['log', 'warn', 'error'],
      },
    ],
    'no-duplicate-imports': 'error',
    'no-empty-function': 'error',
    'no-extra-parens': [
      'warn',
      'all',
      {
        nestedBinaryExpressions: false,
      },
    ],
    'no-floating-decimal': 'error',
    'no-implied-eval': 'error',
    'no-inline-comments': 'error',
    'no-invalid-this': 'error',
    'no-label-var': 'error',
    'no-lone-blocks': 'error',
    'no-lonely-if': 'error',
    'no-mixed-operators': 'error',
    'no-mixed-requires': 'error',
    'no-multi-spaces': 'error',
    'no-multiple-empty-lines': [
      'error',
      {
        max: 2,
        maxEOF: 1,
        maxBOF: 0,
      },
    ],
    'no-new': 'error',
    'no-new-func': 'error',
    'no-new-object': 'error',
    'no-new-require': 'error',
    'no-new-wrappers': 'error',
    'no-octal-escape': 'error',
    'no-path-concat': 'error',
    'no-process-env': 'error',
    'no-return-assign': 'error',
    'no-self-compare': 'error',
    'no-sequences': 'error',
    'no-shadow': 'error',
    'no-spaced-func': 'error',
    'no-trailing-spaces': 'error',
    'no-undef-init': 'error',
    'no-unmodified-loop-condition': 'error',
    'no-unneeded-ternary': [
      'error',
      {
        defaultAssignment: false,
      },
    ],
    'no-unused-expressions': 'error',
    'no-useless-call': 'error',
    'no-useless-computed-key': 'error',
    'no-useless-concat': 'error',
    'no-useless-constructor': 'error',
    'no-useless-escape': 'error',
    'no-void': 'error',
    'no-warning-comments': 'warn',
    'no-whitespace-before-property': 'error',
    'object-curly-newline': 'error',
    'object-curly-spacing': ['error', 'always'],
    'operator-assignment': 'error',
    'operator-linebreak': ['error', 'after'],
    'padded-blocks': [
      'error',
      {
        classes: 'always',
        blocks: 'never',
        switches: 'never',
      },
    ],
    'prefer-arrow-callback': 'error',
    'prefer-const': 'error',
    'prefer-destructuring': [
      'error',
      {
        VariableDeclarator: {
          array: false,
          object: true,
        },
        AssignmentExpression: {
          array: true,
          object: true,
        },
      },
      {
        enforceForRenamedProperties: false,
      },
    ],
    'prefer-rest-params': 'error',
    'prefer-spread': 'error',
    'prefer-template': 'error',
    'quote-props': ['error', 'as-needed'],
    quotes: [
      'error',
      'single',
      {
        avoidEscape: true,
        allowTemplateLiterals: true,
      },
    ],
    'rest-spread-spacing': 'error',
    semi: 'error',
    'semi-spacing': 'error',
    'space-before-blocks': 'error',
    'space-before-function-paren': [
      'error',
      {
        anonymous: 'always',
        named: 'never',
        asyncArrow: 'always',
      },
    ],
    'space-in-parens': 'error',
    'space-infix-ops': 'error',
    'space-unary-ops': 'error',
    'spaced-comment': 'error',
    'template-curly-spacing': 'error',
    'unicode-bom': 'error',
    'valid-jsdoc': [
      'warn',
      {
        requireReturn: false,
        requireReturnDescription: false,
        prefer: {
          arg: 'param',
          argument: 'param',
          prop: 'property',
          constructor: 'class',
          augments: 'extends',
          fires: 'emits',
          var: 'member',
          yield: 'yields',
          return: 'returns',
          exception: 'throws',
          virtual: 'abstract',
        },
        preferType: {
          String: 'string',
          Number: 'number',
          Boolean: 'boolean',
          Symbol: 'symbol',
          function: 'Function',
          object: 'Object',
          date: 'Date',
          error: 'Error',
        },
      },
    ],
    'wrap-iife': 'error',
    'yield-star-spacing': 'error',
    yoda: 'error',
  },
};
